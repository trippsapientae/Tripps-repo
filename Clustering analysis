#Let's compare anomalously dim candidates with bright controls. Both of these subsets should have a distance bias, given that we control for the expected absolute residuals of the model, and those residuals are distance-dependent. Let's start by checking summary statistics of each of the subsets.

candidates['distance'].describe()

bright_control_group['distance'].describe()

#The bright controls are only slightly farther away, by ~5% in average.

#We will now concatenate the position frames of the candidates and bright controls.

anomalous_pos_frame = pd_concat([candidates_pos_frame, bright_control_group_pos_frame])

#Let's calculate squared distances between all pairs of sources in the concatenated frame. We will create a new frame, where each row contains a pair of sources and their squared distance. The new frame will be ordered by distance.

apf_len = len(anomalous_pos_frame)
apf_source_id_idx = anomalous_pos_frame.columns.get_loc('source_id')
apf_x_idx = anomalous_pos_frame.columns.get_loc('x')
apf_y_idx = anomalous_pos_frame.columns.get_loc('y')
apf_z_idx = anomalous_pos_frame.columns.get_loc('z')
new_row_list = []
for i in range(apf_len):
    row1 = anomalous_pos_frame.iloc[i]
    source1 = row1[apf_source_id_idx]
    x1 = row1[apf_x_idx]
    y1 = row1[apf_y_idx]
    z1 = row1[apf_z_idx]
    for j in range(i + 1, apf_len):
        row2 = anomalous_pos_frame.iloc[j]
        source2 = row2[apf_source_id_idx]
        x2 = row2[apf_x_idx]
        y2 = row2[apf_y_idx]
        z2 = row2[apf_z_idx]
        distance_sq = (x2 - x1) ** 2 + (y2 - y1) ** 2 + (z2 - z1) ** 2
        new_row_list.append([source1, source2, distance_sq])
cross_distance_frame = pd.DataFrame(new_row_list, columns=['source1', 'source2', 'distance_sq'])
cross_distance_frame.sort_values('distance_sq', inplace=True)

#Further, we will add two boolean columns to the cross-distance frame indicating whether each of the sources in a pair are anomalously dim.

candidate_source_set = set(candidates['source_id'])
cross_distance_frame['source1_dim'] = cross_distance_frame['source1'].isin(candidate_source_set)
cross_distance_frame['source2_dim'] = cross_distance_frame['source2'].isin(candidate_source_set)

#The cross-distance frame looks as follows.

cross_distance_frame.head(5)

#We're interested in rows where both sources are anomalously dim. The expectation is that True-True rows occur 25% of the time. Indeed, this is what we find if we look at the entire cross-distance frame.

len(cross_distance_frame[cross_distance_frame['source1_dim'] & cross_distance_frame['source2_dim']]) / len(cross_distance_frame)

#Any subsample of the cross-distance frame should also have a frequency of True-True rows of ~25%, within statistical uncertainty, if there's no clustering that depends on the modeled anomaly.

#The following code tests incremental headsets of the ordered cross-distance frame, starting with the first 5 rows.

dim_match_frequency = pd.DataFrame(columns=['count', 'frequency'])
for ss in range(5, 2000, 10):
    sub_frame = cross_distance_frame.iloc[:ss]
    count = len(sub_frame)
    freq = len(sub_frame[sub_frame['source1_dim'] & sub_frame['source2_dim']]) / count
    dim_match_frequency.loc[len(dim_match_frequency)] = [count, freq]

#Let's plot the results of this test. The dashed orange line shows the expected (null hypothesis) frequency. Two additional lines show the lower bound of the 95% (red) and 99% (blue) confidence intervals.

plt.rcParams['figure.figsize'] = (10, 5)
exp_line_x = [0, 2000]
exp_line_y = [0.25, 0.25]
hs_counts = dim_match_frequency['count']
tt_freqs = dim_match_frequency['frequency']
# standard margin of error
std_moe = np.sqrt(0.25 * (1 - 0.25) / hs_counts)
tt_freqs_low_95 = tt_freqs - 1.96 * std_moe
tt_freqs_low_99 = tt_freqs - 2.575 * std_moe
plt.plot(exp_line_x, exp_line_y, '--', color='orange')
plt.plot(hs_counts, tt_freqs, color='black', linewidth=5)
plt.plot(hs_counts, tt_freqs_low_95, color='red', linewidth=1)
plt.plot(hs_counts, tt_freqs_low_99, color='blue', linewidth=1)
plt.yticks(np.linspace(0, 1, 11))
plt.ylim(0, 1.0)
plt.xlim(0, 2000)
#plt.grid(color=(0.9, 0.9, 0.9,))
plt.title('Results of clustering test')
plt.xlabel('Size of headset of ordered cross-distance frame')
plt.ylabel('Frequency of True-True rows')
plt.show()

#We can therefore reject the null hypothesis.
