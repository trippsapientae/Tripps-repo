#We will define a function that extracts the absolute residual array (i.e. the regression label) from a frame.

def get_abs_error_label(data_frame):
    return np.abs(data_frame['error_' + LABEL_COLUMN])
    
#Next, we will define a function that obtains the variables of the absolute residual meta-model.

def extract_error_vars(data_frame):
    parallax = data_frame['parallax']
    parallax_error = data_frame['parallax_error']
    parallax_high = parallax + parallax_error
    parallax_low = parallax - parallax_error
    var_error_diff = np.log(parallax_high) - np.log(parallax_low)
    distance = data_frame['distance']
    longitude = data_frame['l']
    latitude = data_frame['b']
    radial_velocity = data_frame['r_hrv']
    return np.transpose([
        var_error_diff,
        distance,
        longitude,
        latitude,
        radial_velocity
    ])


#The regressor we will use in this case is a Random Forest. There is a technical reason for this. Absolute residuals are always positive. We want a model that always produces positive responses. A Random Forest essentially produces averages of labels over some training examples, which is intuitively in line with what we want to accomplish.
def get_error_trainer():
    return RandomForestRegressor(n_estimators=200, max_depth=10, min_samples_split=2, min_samples_leaf=2)

transform_expected_error = get_cv_model_transform(work_data, get_abs_error_label, extract_error_vars, get_error_trainer(), 
                n_splits=3, response_column='expected_error_' + LABEL_COLUMN)
                
work_data = transform_expected_error(work_data)

print_evaluation(work_data, get_abs_error_label, 'expected_error_' + LABEL_COLUMN)

#The following transform function adds an 'anomaly_' column to a frame, defined as the ratio between the model's residual and the expected absolute residual.

def transform_anomaly(data_frame):
    new_frame = data_frame.copy()
    new_frame['anomaly_' + LABEL_COLUMN] = new_frame['error_' + LABEL_COLUMN] / new_frame['expected_error_' + LABEL_COLUMN]
    return new_frame
    
work_data = transform_anomaly(work_data)

